name: Deploy to Production

on:
  release:
    types: [published]

env:
  REMOTE_COMMON_PARAMS: >-
    -o StrictHostKeyChecking=yes
    -o UserKnownHostsFile=${{ github.workspace }}/prod-srv-signature
    -i ${{ github.workspace }}/ci-cd-key
  SSH_SETUP_CMD: |
    echo "${{ secrets.CI_CD_SSH_KEY }}" > ${{ github.workspace }}/ci-cd-key
    chmod 600 ${{ github.workspace }}/ci-cd-key
    echo "${{ secrets.PROD_SRV_SIGNATURE }}" > ${{ github.workspace }}/prod-srv-signature
    chmod 600 ${{ github.workspace }}/prod-srv-signature

jobs:
  pre-build-checks:
    name: Pre-Build Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
          cache: "npm"

      - name: Setup SSH
        run: ${{ env.SSH_SETUP_CMD }}

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Lint Check
        run: npm run lint

      - name: Copy prod database and env file to local
        run: |
          scp ${{ env.REMOTE_COMMON_PARAMS }} ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }}:${{ vars.PROD_DATA_PATH }}/db.sqlite3 ./db.sqlite3
          scp ${{ env.REMOTE_COMMON_PARAMS }} ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }}:${{ vars.PROD_DATA_PATH }}/.env ./.env

      - name: Test migrations
        run: npx payload migrate

  prep-production-server:
    name: Prep production server
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        run: ${{ env.SSH_SETUP_CMD }}

      # Old container continues to run to minimize downtime
      - name: Stop, make a copy of old data, and restart the old container
        run: |
          ssh ${{ env.REMOTE_COMMON_PARAMS }} ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }} '
          docker stop personal-website || true
          cp -r ${{ vars.PROD_DATA_PATH }} ${{ vars.PROD_DATA_PATH }}.backup
          docker start personal-website
          '

  build-and-push-production-docker-image:
    name: Build and push the production docker image
    needs: [pre-build-checks, prep-production-server]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Gitea Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ gitea.server_url }}
          username: ${{ secrets.GCR_USERNAME }}
          password: ${{ secrets.GCR_ACCESS_TOKEN }}

      - name: Genreate Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.INSTANCE_HOST }}/${{ secrets.GCR_USERNAME }}/personal-website
          tags: |
            type=semver,pattern={{version}},
            type=semver,pattern={{major}},
            type=semver,pattern={{major}}.{{minor}},
            type=semver,pattern={{major}}.{{minor}}.{{patch}},

      - name: Build and push the production docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.INSTANCE_HOST }}/${{ secrets.GCR_USERNAME }}/personal-website:buildcache
          cache-to: type=registry,ref=${{ secrets.INSTANCE_HOST }}/${{ secrets.GCR_USERNAME }}/personal-website:buildcache,mode=max

  deploy-production-server:
    name: Deploy production server
    needs: [build-and-push-production-docker-image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
          cache: "npm"

      - name: Set up SSH
        run: ${{ env.SSH_SETUP_CMD }}

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Copy prod database and env file to local
        run: |
          scp ${{ env.REMOTE_COMMON_PARAMS }} ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }}:${{ vars.PROD_DATA_PATH }}/db.sqlite3 ./db.sqlite3
          scp ${{ env.REMOTE_COMMON_PARAMS }} ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }}:${{ vars.PROD_DATA_PATH }}/.env ./.env

      - name: Run migrations
        run: npx payload migrate

      - name: Push migrated database to Production
        run: scp ${{ env.REMOTE_COMMON_PARAMS }} db.sqlite3 ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }}:${{ vars.PROD_DATA_PATH }}/db.sqlite3

      - name: Stop and remove old production server container
        run: ssh ${{ env.REMOTE_COMMON_PARAMS }} ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }} 'docker compose -f ${{ vars.PROD_DATA_PATH }}/compose.yaml -p personal-website down --remove-orphans'

      - name: Push compose file to production server
        run: scp ${{ env.REMOTE_COMMON_PARAMS }} compose.yaml ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }}:${{ vars.PROD_DATA_PATH }}/compose.yaml

      - name: Deploy production server
        run: |
          ssh ${{ env.REMOTE_COMMON_PARAMS }} ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }} '
          docker compose -f ${{ vars.PROD_DATA_PATH }}/compose.yaml pull
          docker compose -f ${{ vars.PROD_DATA_PATH }}/compose.yaml -p personal-website up -d'

      - name: Clean up old docker images
        run: ssh ${{ env.REMOTE_COMMON_PARAMS }} ${{ secrets.PROD_SRV_USER }}@${{ secrets.PROD_SRV_HOST }} 'docker image prune -f'
